package main

import (
	"context"
	"log"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"

	"github.com/Muhandis2000/online-school/internal/config"
	"github.com/Muhandis2000/online-school/internal/controllers"
	"github.com/Muhandis2000/online-school/internal/db"
	"github.com/Muhandis2000/online-school/internal/middleware"
	"github.com/Muhandis2000/online-school/internal/repositories"
	"github.com/Muhandis2000/online-school/internal/services"
	"github.com/gin-gonic/gin"
)

func main() {
	// 1. –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	cfg, err := config.LoadConfig("config.json")
	if err != nil {
		log.Fatalf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: %v", err)
	}
	log.Println("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

	// 2. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	dbConn, err := db.ConnectPostgres(cfg)
	if err != nil {
		log.Fatalf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: %v", err)
	}
	defer dbConn.Close()
	log.Println("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

	// 3. –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π
	if err := db.RunMigrations(dbConn.DB); err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π: %v", err)
	}
	log.Println("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")

	// 4. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–æ–µ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
	userRepo := repositories.NewUserRepository(dbConn.DB)
	authService := services.NewAuthService(userRepo, cfg.JWT.Secret)
	authController := controllers.NewAuthController(authService)

	// 5. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ—É—Ç–µ—Ä–∞
	router := gin.Default()

	// –ü—É–±–ª–∏—á–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
	router.POST("/register", authController.Register)
	router.POST("/login", authController.Login)

	// –ó–∞—â–∏—â–µ–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
	authGroup := router.Group("/")
	authGroup.Use(middleware.JWTAuthMiddleware(cfg.JWT.Secret))
	{
		// –ó–¥–µ—Å—å –±—É–¥—É—Ç –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
		authGroup.GET("/protected", func(c *gin.Context) {
			c.JSON(200, gin.H{"message": "–≠—Ç–æ –∑–∞—â–∏—â–µ–Ω–Ω—ã–π —Ä–µ—Å—É—Ä—Å!"})
		})
	}

	// 6. –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
	srv := &http.Server{
		Addr:    ":" + cfg.Server.Port,
		Handler: router,
	}

	go func() {
		log.Printf("üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É %s", cfg.Server.Port)
		if err := srv.ListenAndServe(); err != nil && err != http.ErrServerClosed {
			log.Fatalf("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: %s\n", err)
		}
	}()

	// 7. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
	<-quit
	log.Println("‚è≥ –í—ã–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞...")

	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()
	if err := srv.Shutdown(ctx); err != nil {
		log.Fatal("‚ùå –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞:", err)
	}

	log.Println("‚úÖ –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
}
