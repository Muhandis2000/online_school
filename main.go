// @title Online School API
// @version 1.0
// @description API –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–Ω–ª–∞–π–Ω-—à–∫–æ–ª–æ–π

// @contact.name API Support
// @contact.url http://www.example.com/support
// @contact.email support@example.com

// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html

// @host localhost:8080
// @BasePath /
// @securityDefinitions.apikey ApiKeyAuth
// @in header
// @name Authorization
package main

import (
	"context"
	"log"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"

	"online-school/internal/config"
	"online-school/internal/controllers"
	"online-school/internal/db"
	"online-school/internal/middleware"
	"online-school/internal/repositories"
	"online-school/internal/services"

	_ "online-school/docs" // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é

	"github.com/gin-gonic/gin"
	swaggerFiles "github.com/swaggo/files" // swagger embed files
	ginSwagger "github.com/swaggo/gin-swagger"
)

func main() {
	// 1. –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	cfg, err := config.LoadConfig("config.json")
	if err != nil {
		log.Fatalf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: %v", err)
	}
	log.Println("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

	// 2. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	dbConn, err := db.ConnectPostgres(cfg)
	if err != nil {
		log.Fatalf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: %v", err)
	}
	defer dbConn.Close()
	log.Println("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

	// 3. –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π
	if err := db.RunMigrations(dbConn.DB); err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π: %v", err)
	}
	log.Println("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")

	// 4. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
	userRepo := repositories.NewUserRepository(dbConn.DB)
	teacherRepo := repositories.NewTeacherRepository(dbConn.DB)
	studentRepo := repositories.NewStudentRepository(dbConn.DB)
	lessonRepo := repositories.NewLessonRepository(dbConn.DB)
	scheduleRepo := repositories.NewScheduleRepository(dbConn.DB)
	homeworkRepo := repositories.NewHomeworkRepository(dbConn.DB)
	gradeRepo := repositories.NewGradeRepository(dbConn.DB)
	attendanceRepo := repositories.NewAttendanceRepository(dbConn.DB)
	paymentRepo := repositories.NewPaymentRepository(dbConn.DB)

	// 5. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
	authService := services.NewAuthService(userRepo, cfg.JWT.Secret)
	adminService := services.NewAdminService(
		userRepo,
		teacherRepo,
		studentRepo,
		lessonRepo,
		scheduleRepo,
		paymentRepo,
	)
	teacherService := services.NewTeacherService(
		teacherRepo,
		lessonRepo,
		scheduleRepo,
		attendanceRepo,
		gradeRepo,
	)
	studentService := services.NewStudentService(
		studentRepo,
		scheduleRepo,
		lessonRepo,
		homeworkRepo,
		gradeRepo,
		attendanceRepo,
	)

	// 6. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤
	authController := controllers.NewAuthController(authService)
	adminController := controllers.NewAdminController(adminService)
	teacherController := controllers.NewTeacherController(teacherService)
	studentController := controllers.NewStudentController(studentService)

	// 7. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gin
	gin.SetMode(gin.ReleaseMode)
	router := gin.Default()

	// –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ—É—Ç –¥–ª—è Swagger UI
	router.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))
	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
	router.Use(func(c *gin.Context) {
		c.Header("Access-Control-Allow-Origin", "*")
		c.Header("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS")
		c.Header("Access-Control-Allow-Headers", "Content-Type, Authorization")
		if c.Request.Method == "OPTIONS" {
			c.AbortWithStatus(http.StatusNoContent)
			return
		}
		c.Next()
	})
	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
	router.Use(gin.Logger())
	router.Use(gin.Recovery())

	// 8. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤
	// –ü—É–±–ª–∏—á–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
	router.POST("/register", authController.Register)
	router.POST("/login", authController.Login)

	// –ó–∞—â–∏—â–µ–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
	authGroup := router.Group("/")
	authGroup.Use(middleware.JWTAuthMiddleware(cfg.JWT.Secret))
	{
		// –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
		adminGroup := authGroup.Group("/admin")
		adminGroup.Use(middleware.RoleMiddleware("admin"))
		{
			adminGroup.POST("/teachers", adminController.CreateTeacher)
			adminGroup.PUT("/teachers/:id/approve", adminController.ApproveTeacher)
			adminGroup.POST("/students", adminController.CreateStudent)
			adminGroup.POST("/lessons", adminController.CreateLesson)
			adminGroup.POST("/schedules", adminController.CreateSchedule)
			adminGroup.POST("/payments", adminController.CreatePayment)
		}

		// –§—É–Ω–∫—Ü–∏–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
		teacherGroup := authGroup.Group("/teacher")
		teacherGroup.Use(middleware.RoleMiddleware("teacher"))
		{
			teacherGroup.POST("/lessons", teacherController.CreateLesson)
			teacherGroup.POST("/attendance", teacherController.RecordAttendance)
			teacherGroup.POST("/grades", teacherController.RecordGrade)
			teacherGroup.GET("/lessons", teacherController.GetLessons)
			teacherGroup.GET("/schedule", teacherController.GetSchedule)
		}

		// –§—É–Ω–∫—Ü–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞
		studentGroup := authGroup.Group("/student")
		studentGroup.Use(middleware.RoleMiddleware("student"))
		{
			studentGroup.GET("/schedule", studentController.GetSchedule)
			studentGroup.GET("/lessons", studentController.GetLessons)
			studentGroup.POST("/homework", studentController.SubmitHomework)
			studentGroup.GET("/grades", studentController.GetGrades)
			studentGroup.GET("/attendance", studentController.GetAttendance)
		}

		// –û–±—â–∏–µ –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
		authGroup.GET("/protected", func(c *gin.Context) {
			userID, _ := c.Get("userID")
			userRole, _ := c.Get("userRole")
			c.JSON(200, gin.H{
				"message": "–≠—Ç–æ –∑–∞—â–∏—â–µ–Ω–Ω—ã–π —Ä–µ—Å—É—Ä—Å!",
				"user_id": userID,
				"role":    userRole,
			})
		})
	}

	// 9. –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
	srv := &http.Server{
		Addr:    ":" + cfg.Server.Port,
		Handler: router,
	}

	go func() {
		log.Printf("üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É %s", cfg.Server.Port)
		if err := srv.ListenAndServe(); err != nil && err != http.ErrServerClosed {
			log.Fatalf("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: %s\n", err)
		}
	}()

	// 10. Graceful shutdown
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
	<-quit
	log.Println("‚è≥ –í—ã–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞...")

	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()
	if err := srv.Shutdown(ctx); err != nil {
		log.Fatal("‚ùå –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞:", err)
	}

	log.Println("‚úÖ –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
}
